//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace bridge.api.bclogia.cz
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Bridge
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public Bridge(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl;
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Firma
        /// </summary>
        /// <param name="id">ID firmy - FirID</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BCFirmyModel> FirmyAsync(int id)
        {
            return FirmyAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Firma
        /// </summary>
        /// <param name="id">ID firmy - FirID</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BCFirmyModel> FirmyAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/firmy/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BCFirmyModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Předpis
        /// </summary>
        /// <param name="spolid">Společnost</param>
        /// <param name="id">ID předpisu</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BCPredpis2DetailModel> PredpisAsync(int? spolid, int? id)
        {
            return PredpisAsync(spolid, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Předpis
        /// </summary>
        /// <param name="spolid">Společnost</param>
        /// <param name="id">ID předpisu</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BCPredpis2DetailModel> PredpisAsync(int? spolid, int? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/predpis?");
            if (spolid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Spolid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(spolid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BCPredpis2DetailModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Vyhledávání předpisů
        /// </summary>
        /// <param name="spolid">Společnost</param>
        /// <param name="predCisloFrom">Číslo FA od</param>
        /// <param name="predCisloTo">Číslo FA do</param>
        /// <param name="predDatumUZPFrom">Datum UZP od</param>
        /// <param name="predDatumUZPTo">Datum UZP do</param>
        /// <param name="doklRadaID">Dokladová řada</param>
        /// <param name="since">Datum poslední aktualizace od</param>
        /// <param name="start">Start (minimální hodnota 0)</param>
        /// <param name="limit">Limit (minimální hodnota 1, maximální hodnota 100)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BCPredpis2ListModelBCPaging> SearchAsync(int? spolid, double? predCisloFrom, double? predCisloTo, System.DateTimeOffset? predDatumUZPFrom, System.DateTimeOffset? predDatumUZPTo, int? doklRadaID, System.DateTimeOffset? since, int? start, int? limit)
        {
            return SearchAsync(spolid, predCisloFrom, predCisloTo, predDatumUZPFrom, predDatumUZPTo, doklRadaID, since, start, limit, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Vyhledávání předpisů
        /// </summary>
        /// <param name="spolid">Společnost</param>
        /// <param name="predCisloFrom">Číslo FA od</param>
        /// <param name="predCisloTo">Číslo FA do</param>
        /// <param name="predDatumUZPFrom">Datum UZP od</param>
        /// <param name="predDatumUZPTo">Datum UZP do</param>
        /// <param name="doklRadaID">Dokladová řada</param>
        /// <param name="since">Datum poslední aktualizace od</param>
        /// <param name="start">Start (minimální hodnota 0)</param>
        /// <param name="limit">Limit (minimální hodnota 1, maximální hodnota 100)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BCPredpis2ListModelBCPaging> SearchAsync(int? spolid, double? predCisloFrom, double? predCisloTo, System.DateTimeOffset? predDatumUZPFrom, System.DateTimeOffset? predDatumUZPTo, int? doklRadaID, System.DateTimeOffset? since, int? start, int? limit, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/predpisy/search?");
            if (spolid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Spolid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(spolid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (predCisloFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("PredCisloFrom") + "=").Append(System.Uri.EscapeDataString(ConvertToString(predCisloFrom, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (predCisloTo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("PredCisloTo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(predCisloTo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (predDatumUZPFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("PredDatumUZPFrom") + "=").Append(System.Uri.EscapeDataString(predDatumUZPFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (predDatumUZPTo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("PredDatumUZPTo") + "=").Append(System.Uri.EscapeDataString(predDatumUZPTo.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (doklRadaID != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DoklRadaID") + "=").Append(System.Uri.EscapeDataString(ConvertToString(doklRadaID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (since != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Since") + "=").Append(System.Uri.EscapeDataString(since.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BCPredpis2ListModelBCPaging>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Likvidační místa
        /// </summary>
        /// <param name="spolid">Společnost</param>
        /// <param name="start">Start (minimální hodnota 0)</param>
        /// <param name="limit">Limit (minimální hodnota 1, maximální hodnota 100)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BCRoadPlanLikvMistaModelBCPaging> LikvmistaAsync(int? spolid, int? start, int? limit)
        {
            return LikvmistaAsync(spolid, start, limit, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Likvidační místa
        /// </summary>
        /// <param name="spolid">Společnost</param>
        /// <param name="start">Start (minimální hodnota 0)</param>
        /// <param name="limit">Limit (minimální hodnota 1, maximální hodnota 100)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BCRoadPlanLikvMistaModelBCPaging> LikvmistaAsync(int? spolid, int? start, int? limit, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/roadplan/likvmista?");
            if (spolid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Spolid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(spolid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BCRoadPlanLikvMistaModelBCPaging>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Jízdy
        /// </summary>
        /// <param name="spolid">Společnost</param>
        /// <param name="datumOd">Datum od</param>
        /// <param name="datumDo">Datum do</param>
        /// <param name="start">Start (minimální hodnota 0)</param>
        /// <param name="limit">Limit (minimální hodnota 1, maximální hodnota 100)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BCRoadPlanJizdyModelBCPaging> JizdyAsync(int? spolid, System.DateTimeOffset datumOd, System.DateTimeOffset datumDo, int? start, int? limit)
        {
            return JizdyAsync(spolid, datumOd, datumDo, start, limit, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Jízdy
        /// </summary>
        /// <param name="spolid">Společnost</param>
        /// <param name="datumOd">Datum od</param>
        /// <param name="datumDo">Datum do</param>
        /// <param name="start">Start (minimální hodnota 0)</param>
        /// <param name="limit">Limit (minimální hodnota 1, maximální hodnota 100)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BCRoadPlanJizdyModelBCPaging> JizdyAsync(int? spolid, System.DateTimeOffset datumOd, System.DateTimeOffset datumDo, int? start, int? limit, System.Threading.CancellationToken cancellationToken)
        {
            if (datumOd == null)
                throw new System.ArgumentNullException("datumOd");

            if (datumDo == null)
                throw new System.ArgumentNullException("datumDo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/roadplan/jizdy?");
            if (spolid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Spolid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(spolid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("DatumOd") + "=").Append(System.Uri.EscapeDataString(datumOd.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("DatumDo") + "=").Append(System.Uri.EscapeDataString(datumDo.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BCRoadPlanJizdyModelBCPaging>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// Firma
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BCFirmyModel
    {
        /// <summary>
        /// ID firmy
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FirID", Required = Newtonsoft.Json.Required.Always)]
        public int FirID { get; set; }

        /// <summary>
        /// IČ
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FirICO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string FirICO { get; set; }

        /// <summary>
        /// Název
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FirORNAZ", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string FirORNAZ { get; set; }

        /// <summary>
        /// Pokračování názvu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FirORNA1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string FirORNA1 { get; set; }

        /// <summary>
        /// DIČ
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FirDICO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string FirDICO { get; set; }

        /// <summary>
        /// DIČ EU
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FirDICEU", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string FirDICEU { get; set; }

        /// <summary>
        /// DIČ KH
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FirDICKH", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string FirDICKH { get; set; }

        /// <summary>
        /// Město
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FirMesto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string FirMesto { get; set; }

        /// <summary>
        /// Ulice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FirUlice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string FirUlice { get; set; }

        /// <summary>
        /// ČP
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FirCP", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string FirCP { get; set; }

        /// <summary>
        /// PSČ
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FirPSC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string FirPSC { get; set; }

        /// <summary>
        /// Stát
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FirStat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string FirStat { get; set; }

        /// <summary>
        /// Sídlo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FirSidlo", Required = Newtonsoft.Json.Required.Always)]
        public bool FirSidlo { get; set; }

        /// <summary>
        /// Provozovna
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FirPoboc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FirPoboc { get; set; }

        /// <summary>
        /// Telefon
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FirTel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string FirTel { get; set; }

        /// <summary>
        /// e-mail
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FirEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string FirEmail { get; set; }

        /// <summary>
        /// Bankovní účet
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FirUcet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string FirUcet { get; set; }

        /// <summary>
        /// Banka
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FirBanka", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string FirBanka { get; set; }

        /// <summary>
        /// Datum/čas založení záznamu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TSIns", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset TSIns { get; set; }

        /// <summary>
        /// Datum/čas poslední aktualizace záznamu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TS", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset TS { get; set; }

        /// <summary>
        /// TS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upsize_ts", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public byte[] Upsize_ts { get; set; }

        /// <summary>
        /// Příznak historického záznamu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("HIST", Required = Newtonsoft.Json.Required.Always)]
        public bool HIST { get; set; }

        /// <summary>
        /// Exter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FirExter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string FirExter { get; set; }

        /// <summary>
        /// Web
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FirWeb", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string FirWeb { get; set; }

        /// <summary>
        /// IBAN
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FirUcetIBAN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string FirUcetIBAN { get; set; }

        /// <summary>
        /// SWIFT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FirBankaSWIFT", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string FirBankaSWIFT { get; set; }

        /// <summary>
        /// Stát - zkratka
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FirStatKodA3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string FirStatKodA3 { get; set; }

    }

    /// <summary>
    /// Předpis rekapitulace částek
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BCPredpis2CastkyRekapModel
    {
        /// <summary>
        /// ID společnosti
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SpolID", Required = Newtonsoft.Json.Required.Always)]
        public int SpolID { get; set; }

        /// <summary>
        /// ID faktury
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredID", Required = Newtonsoft.Json.Required.Always)]
        public int PredID { get; set; }

        /// <summary>
        /// Měna
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RekapMena", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string RekapMena { get; set; }

        /// <summary>
        /// Částka celkem
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RekapCastka", Required = Newtonsoft.Json.Required.Always)]
        public double RekapCastka { get; set; }

        /// <summary>
        /// Datum/čas založení záznamu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TSIns", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset TSIns { get; set; }

        /// <summary>
        /// Datum/čas poslední aktualizace záznamu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TS", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset TS { get; set; }

        /// <summary>
        /// TS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upsize_ts", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public byte[] Upsize_ts { get; set; }

        /// <summary>
        /// Příznak historického záznamu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("HIST", Required = Newtonsoft.Json.Required.Always)]
        public bool HIST { get; set; }

    }

    /// <summary>
    /// Předpis rekapitulace DPH
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BCPredpis2DPHRekapModel
    {
        /// <summary>
        /// ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredRekDPHID", Required = Newtonsoft.Json.Required.Always)]
        public int PredRekDPHID { get; set; }

        /// <summary>
        /// ID společnosti
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SpolID", Required = Newtonsoft.Json.Required.Always)]
        public int SpolID { get; set; }

        /// <summary>
        /// ID faktury
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredID", Required = Newtonsoft.Json.Required.Always)]
        public int PredID { get; set; }

        /// <summary>
        /// Měna
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Mena", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string Mena { get; set; }

        /// <summary>
        /// Skupina DPH
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SKDPH", Required = Newtonsoft.Json.Required.Always)]
        public int SKDPH { get; set; }

        /// <summary>
        /// Druh DPH: 0 - Bez DPH, 1 - Snížená sazba, 2 - Základní sazba, 3 - Třetí sazba
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DrDph", Required = Newtonsoft.Json.Required.Always)]
        public int DrDph { get; set; }

        /// <summary>
        /// % DPH
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DPHProc", Required = Newtonsoft.Json.Required.Always)]
        public double DPHProc { get; set; }

        /// <summary>
        /// Částka základu daně
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CastkaZaklad", Required = Newtonsoft.Json.Required.Always)]
        public double CastkaZaklad { get; set; }

        /// <summary>
        /// Částka daň
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CastkaDPH", Required = Newtonsoft.Json.Required.Always)]
        public double CastkaDPH { get; set; }

        /// <summary>
        /// Datum/čas založení záznamu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TSIns", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset TSIns { get; set; }

        /// <summary>
        /// Datum/čas poslední aktualizace záznamu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TS", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset TS { get; set; }

        /// <summary>
        /// TS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upsize_ts", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public byte[] Upsize_ts { get; set; }

        /// <summary>
        /// Příznak historického záznamu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("HIST", Required = Newtonsoft.Json.Required.Always)]
        public bool HIST { get; set; }

    }

    /// <summary>
    /// Předpis deník
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BCPredpis2DenikModel
    {
        /// <summary>
        /// ID společnosti
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SpolID", Required = Newtonsoft.Json.Required.Always)]
        public int SpolID { get; set; }

        /// <summary>
        /// ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DenID", Required = Newtonsoft.Json.Required.Always)]
        public int DenID { get; set; }

        /// <summary>
        /// ID faktury
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredID", Required = Newtonsoft.Json.Required.Always)]
        public int PredID { get; set; }

        /// <summary>
        /// Řádek dokladu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DenRadek", Required = Newtonsoft.Json.Required.Always)]
        public int DenRadek { get; set; }

        /// <summary>
        /// Středisko
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StredID", Required = Newtonsoft.Json.Required.Always)]
        public int StredID { get; set; }

        /// <summary>
        /// Číslo pohybu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PohCislo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PohCislo { get; set; }

        /// <summary>
        /// Účet MD
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UcUcetMD", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string UcUcetMD { get; set; }

        /// <summary>
        /// Účet DAL
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UcUcetDL", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string UcUcetDL { get; set; }

        /// <summary>
        /// Částka
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DenHod", Required = Newtonsoft.Json.Required.Always)]
        public double DenHod { get; set; }

        /// <summary>
        /// Účastník operace
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DenUcast", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string DenUcast { get; set; }

        /// <summary>
        /// Skupina DPH
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SKDPH", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SKDPH { get; set; }

        /// <summary>
        /// Druh DPH: 0 - Bez DPH, 1 - Snížená sazba, 2 - Základní sazba, 3 - Třetí sazba
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DrDph", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DrDph { get; set; }

        /// <summary>
        /// % DPH
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DPHProc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DPHProc { get; set; }

        /// <summary>
        /// Řádek výkazu DPH
        /// </summary>
        [Newtonsoft.Json.JsonProperty("VykRadDPH", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string VykRadDPH { get; set; }

        /// <summary>
        /// VS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DenVarSy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DenVarSy { get; set; }

        /// <summary>
        /// Párování: Ne, Dod, Odb, UhD, UhO
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Parov", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Parov { get; set; }

        /// <summary>
        /// Zakázka
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CIZAK", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string CIZAK { get; set; }

        /// <summary>
        /// Poznámka
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DenPozn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string DenPozn { get; set; }

        /// <summary>
        /// Ostatní párování
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DenOstPar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string DenOstPar { get; set; }

        /// <summary>
        /// Částka v zahraniční měně
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DenHodZ1", Required = Newtonsoft.Json.Required.Always)]
        public double DenHodZ1 { get; set; }

        /// <summary>
        /// Měna
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DenMena1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string DenMena1 { get; set; }

        /// <summary>
        /// Kurz
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DenKurs1", Required = Newtonsoft.Json.Required.Always)]
        public double DenKurs1 { get; set; }

        /// <summary>
        /// Partner
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DenPartner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DenPartner { get; set; }

        /// <summary>
        /// Prostředek/akce
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UcDCPAUID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string UcDCPAUID { get; set; }

        /// <summary>
        /// Pořadí DDP
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DenPorDPH", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DenPorDPH { get; set; }

        /// <summary>
        /// Mimo DPH A/N
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DenMimoDPH", Required = Newtonsoft.Json.Required.Always)]
        public bool DenMimoDPH { get; set; }

        /// <summary>
        /// Posun DPH A/N
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DenPosunDPH", Required = Newtonsoft.Json.Required.Always)]
        public bool DenPosunDPH { get; set; }

        /// <summary>
        /// Valuta platby
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DenValueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DenValueDate { get; set; }

        /// <summary>
        /// Aktivita
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AktNazev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string AktNazev { get; set; }

        /// <summary>
        /// Typ N/V
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NaklVynNazev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string NaklVynNazev { get; set; }

        /// <summary>
        /// Firma
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FirID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FirID { get; set; }

        /// <summary>
        /// SS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DenSpecSy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DenSpecSy { get; set; }

        /// <summary>
        /// Číslo daňového dokladu text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DenDoklDanText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string DenDoklDanText { get; set; }

        /// <summary>
        /// Členění pro souhrnné hlášení: 1 - zboží, 2 - služba
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ClenID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ClenID { get; set; }

        /// <summary>
        /// Poznámka dlouhá
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DenPoznLong", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string DenPoznLong { get; set; }

        /// <summary>
        /// Kód zboží (celní sazebník)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ZbKod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ZbKod { get; set; }

        /// <summary>
        /// Množství zboží
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DenZbMnozstvi", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DenZbMnozstvi { get; set; }

        /// <summary>
        /// MJ zboží
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DenZbMJ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string DenZbMJ { get; set; }

        /// <summary>
        /// Datum/čas založení záznamu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TSIns", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset TSIns { get; set; }

        /// <summary>
        /// Datum/čas poslední aktualizace záznamu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TS", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset TS { get; set; }

        /// <summary>
        /// TS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upsize_ts", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public byte[] Upsize_ts { get; set; }

        /// <summary>
        /// Příznak historického záznamu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("HIST", Required = Newtonsoft.Json.Required.Always)]
        public bool HIST { get; set; }

        /// <summary>
        /// Číslo P/A
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UcDCPANazev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string UcDCPANazev { get; set; }

        /// <summary>
        /// Typ DPH (bez DPH, DPH 0%, osvobozeno, přenos DPH, přenos DPH samozdanění)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DPHTypID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DPHTypID { get; set; }

        /// <summary>
        /// Název zakázky
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NAZAK", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string NAZAK { get; set; }

        /// <summary>
        /// Aktivita název
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AktPopis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string AktPopis { get; set; }

    }

    /// <summary>
    /// Předpis detail
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BCPredpis2DetailModel
    {
        /// <summary>
        /// ID společnosti
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SpolID", Required = Newtonsoft.Json.Required.Always)]
        public int SpolID { get; set; }

        /// <summary>
        /// ID předpisu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredID", Required = Newtonsoft.Json.Required.Always)]
        public int PredID { get; set; }

        [Newtonsoft.Json.JsonProperty("Predpis", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BCPredpis2Model Predpis { get; set; }

        [Newtonsoft.Json.JsonProperty("Firma", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BCFirmyModel Firma { get; set; }

        /// <summary>
        /// Deník
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Denik", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BCPredpis2DenikModel> Denik { get; set; }

        /// <summary>
        /// Rekapitulace částek
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CastkyRekap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BCPredpis2CastkyRekapModel> CastkyRekap { get; set; }

        /// <summary>
        /// Rekapitulace DPH
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DPHRekap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BCPredpis2DPHRekapModel> DPHRekap { get; set; }

        /// <summary>
        /// Řádky předpisu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Radky", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BCPredpis2RadkyModel> Radky { get; set; }

        /// <summary>
        /// Vazba deník - řádky předpisu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RadkyDenik", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BCPredpis2RadkyDenikModel> RadkyDenik { get; set; }

        [Newtonsoft.Json.JsonProperty("KonPr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BCFirmyModel KonPr { get; set; }

    }

    /// <summary>
    /// Předpis
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BCPredpis2ListModel
    {
        /// <summary>
        /// ID společnosti
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SpolID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SpolID { get; set; }

        /// <summary>
        /// ID předpisu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PredID { get; set; }

        /// <summary>
        /// Číslo FA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredCislo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PredCislo { get; set; }

        /// <summary>
        /// Číslo FA dodavatele
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredCisloDod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PredCisloDod { get; set; }

        /// <summary>
        /// Typ faktury: 1 - Faktura vydaná, 2 - Faktura přijatá
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredTypID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PredTypID { get; set; }

        /// <summary>
        /// Druh faktury
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredDruhShortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string PredDruhShortName { get; set; }

        /// <summary>
        /// Dokladová řada
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DoklRadaID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DoklRadaID { get; set; }

        /// <summary>
        /// Firma
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredFirID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PredFirID { get; set; }

        /// <summary>
        /// Datum UZP
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredDatumUZP", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset PredDatumUZP { get; set; }

        /// <summary>
        /// Datum/čas poslední aktualizace záznamu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TS", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TS { get; set; }

        /// <summary>
        /// TS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upsize_ts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Upsize_ts { get; set; }

        /// <summary>
        /// Konečný příjemce
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredFirIDKonPr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PredFirIDKonPr { get; set; }

    }

    /// <summary>
    /// Data včetně stránkování
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BCPredpis2ListModelBCPaging
    {
        /// <summary>
        /// Seznam záznamů
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BCPredpis2ListModel> Data { get; set; }

        /// <summary>
        /// Celkový počet záznamů
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TotalRecords", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalRecords { get; set; }

    }

    /// <summary>
    /// Předpis
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BCPredpis2Model
    {
        /// <summary>
        /// ID společnosti
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SpolID", Required = Newtonsoft.Json.Required.Always)]
        public int SpolID { get; set; }

        /// <summary>
        /// ID předpisu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredID", Required = Newtonsoft.Json.Required.Always)]
        public int PredID { get; set; }

        /// <summary>
        /// Číslo FA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredCislo", Required = Newtonsoft.Json.Required.Always)]
        public double PredCislo { get; set; }

        /// <summary>
        /// Číslo FA dodavatele
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredCisloDod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PredCisloDod { get; set; }

        /// <summary>
        /// VS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredVarSy", Required = Newtonsoft.Json.Required.Always)]
        public double PredVarSy { get; set; }

        /// <summary>
        /// Číslo objednávky
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredObjed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PredObjed { get; set; }

        /// <summary>
        /// Typ faktury: 1 - Faktura vydaná, 2 - Faktura přijatá
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredTypID", Required = Newtonsoft.Json.Required.Always)]
        public int PredTypID { get; set; }

        /// <summary>
        /// Druh faktury
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredDruhShortName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string PredDruhShortName { get; set; }

        /// <summary>
        /// Dokladová řada
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DoklRadaID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DoklRadaID { get; set; }

        /// <summary>
        /// Zahraniční FA - A/N
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredZahr", Required = Newtonsoft.Json.Required.Always)]
        public bool PredZahr { get; set; }

        /// <summary>
        /// Účetní stav faktury : 1 - Pořízený, 2 - Odsouhlasený, 3 - Nezaúčtovaný, 4 - Zaúčtovaný
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredUcStavID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PredUcStavID { get; set; }

        /// <summary>
        /// Firma
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredFirID", Required = Newtonsoft.Json.Required.Always)]
        public int PredFirID { get; set; }

        /// <summary>
        /// Firma - účet
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredFirmaUcet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string PredFirmaUcet { get; set; }

        /// <summary>
        /// Firma - banka
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredFirmaBanka", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string PredFirmaBanka { get; set; }

        /// <summary>
        /// Datum UZP
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredDatumUZP", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset PredDatumUZP { get; set; }

        /// <summary>
        /// Datum vystavení
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredDatumVyst", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset PredDatumVyst { get; set; }

        /// <summary>
        /// Datum splatnosti
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredDatumSpl", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset PredDatumSpl { get; set; }

        /// <summary>
        /// Datum evidence
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredDatumEvid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PredDatumEvid { get; set; }

        /// <summary>
        /// Konstantní symbol
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredKonSy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PredKonSy { get; set; }

        /// <summary>
        /// Specifický symbol
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredSpecSy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PredSpecSy { get; set; }

        /// <summary>
        /// Kurz
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredKurz", Required = Newtonsoft.Json.Required.Always)]
        public double PredKurz { get; set; }

        /// <summary>
        /// Měna
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredMena", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string PredMena { get; set; }

        /// <summary>
        /// Zahraniční měna
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredMenaZahr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string PredMenaZahr { get; set; }

        /// <summary>
        /// Sazba penále
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredSazPen", Required = Newtonsoft.Json.Required.Always)]
        public double PredSazPen { get; set; }

        /// <summary>
        /// Způsob placení
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ZpPlaceni", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ZpPlaceni { get; set; }

        /// <summary>
        /// Zakázka - číslo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CIZAK", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string CIZAK { get; set; }

        /// <summary>
        /// Zakázka - název
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NAZAK", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string NAZAK { get; set; }

        /// <summary>
        /// Autor - osobní číslo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredAutor", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string PredAutor { get; set; }

        /// <summary>
        /// Obchodník - osobní číslo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredDealer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string PredDealer { get; set; }

        /// <summary>
        /// Upomínat A/N
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredUpominat", Required = Newtonsoft.Json.Required.Always)]
        public bool PredUpominat { get; set; }

        /// <summary>
        /// Datum účtování
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredDatumUct", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PredDatumUct { get; set; }

        /// <summary>
        /// Účtoval - osobní číslo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredUctovalID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string PredUctovalID { get; set; }

        /// <summary>
        /// Pobočka
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Poboc", Required = Newtonsoft.Json.Required.Always)]
        public int Poboc { get; set; }

        /// <summary>
        /// Číslo faktury text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredCisloText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string PredCisloText { get; set; }

        /// <summary>
        /// Datum/čas založení záznamu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TSIns", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset TSIns { get; set; }

        /// <summary>
        /// Datum/čas poslední aktualizace záznamu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TS", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset TS { get; set; }

        /// <summary>
        /// TS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upsize_ts", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public byte[] Upsize_ts { get; set; }

        /// <summary>
        /// Příznak historického záznamu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("HIST", Required = Newtonsoft.Json.Required.Always)]
        public bool HIST { get; set; }

        /// <summary>
        /// Datum operace předpisu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredDatumOper", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PredDatumOper { get; set; }

        /// <summary>
        /// Datum DPH předpisu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredDatumDPH", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PredDatumDPH { get; set; }

        /// <summary>
        /// Poznámka
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredPoznamka", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(-1)]
        public string PredPoznamka { get; set; }

        /// <summary>
        /// Text daňové rekapitulace
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredTextRek", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(-1)]
        public string PredTextRek { get; set; }

        /// <summary>
        /// Vystavil
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredVystavil", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(-1)]
        public string PredVystavil { get; set; }

        /// <summary>
        /// Bankovní účet
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredUcet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string PredUcet { get; set; }

        /// <summary>
        /// IBAN
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredUcetIBAN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string PredUcetIBAN { get; set; }

        /// <summary>
        /// Banka
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredBanka", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string PredBanka { get; set; }

        /// <summary>
        /// SWIFT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredBankaSWIFT", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string PredBankaSWIFT { get; set; }

        /// <summary>
        /// Pobočka
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredBankaPoboc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string PredBankaPoboc { get; set; }

        /// <summary>
        /// Vendor název
        /// </summary>
        [Newtonsoft.Json.JsonProperty("VendorNazev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string VendorNazev { get; set; }

        /// <summary>
        /// Název firmy
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredOrNaz", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string PredOrNaz { get; set; }

        /// <summary>
        /// Pokračování názvu firmy
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredOrNa1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string PredOrNa1 { get; set; }

        /// <summary>
        /// Ulice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredOrUlice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string PredOrUlice { get; set; }

        /// <summary>
        /// Město
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredOrMesto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string PredOrMesto { get; set; }

        /// <summary>
        /// IČ
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredOrICO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PredOrICO { get; set; }

        /// <summary>
        /// DIČ
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredOrDIC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string PredOrDIC { get; set; }

        /// <summary>
        /// Při tvorbě FA - použít hlavní smlouvu A/N
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DavkaUseMainSml", Required = Newtonsoft.Json.Required.Always)]
        public bool DavkaUseMainSml { get; set; }

        /// <summary>
        /// Středisko dodavatele
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredStredDod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PredStredDod { get; set; }

        /// <summary>
        /// Středisko odběratele
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredStredOdb", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PredStredOdb { get; set; }

        /// <summary>
        /// Konečný příjemce
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredFirIDKonPr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PredFirIDKonPr { get; set; }

    }

    /// <summary>
    /// Předpis vazba deník - řádek předpisu
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BCPredpis2RadkyDenikModel
    {
        /// <summary>
        /// ID společnosti
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SpolID", Required = Newtonsoft.Json.Required.Always)]
        public int SpolID { get; set; }

        /// <summary>
        /// ID řádku dokladu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ID", Required = Newtonsoft.Json.Required.Always)]
        public int ID { get; set; }

        /// <summary>
        /// ID dokladu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DenID", Required = Newtonsoft.Json.Required.Always)]
        public int DenID { get; set; }

        /// <summary>
        /// Množství
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Mnozstvi", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Mnozstvi { get; set; }

        /// <summary>
        /// TSIns
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TSIns", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset TSIns { get; set; }

        /// <summary>
        /// TS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TS", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset TS { get; set; }

        /// <summary>
        /// upsize_ts
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upsize_ts", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public byte[] Upsize_ts { get; set; }

        /// <summary>
        /// HIST
        /// </summary>
        [Newtonsoft.Json.JsonProperty("HIST", Required = Newtonsoft.Json.Required.Always)]
        public bool HIST { get; set; }

    }

    /// <summary>
    /// Předpis řádky
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BCPredpis2RadkyModel
    {
        /// <summary>
        /// ID společnosti
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SpolID", Required = Newtonsoft.Json.Required.Always)]
        public int SpolID { get; set; }

        /// <summary>
        /// ID faktury
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredID", Required = Newtonsoft.Json.Required.Always)]
        public int PredID { get; set; }

        /// <summary>
        /// Pořadí řádku faktury
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredObsPoradi", Required = Newtonsoft.Json.Required.Always)]
        public int PredObsPoradi { get; set; }

        /// <summary>
        /// ID řádku
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ID", Required = Newtonsoft.Json.Required.Always)]
        public int ID { get; set; }

        /// <summary>
        /// Typ řádku (B - běžný, H - text, C - zaplacená záloha, V - haléřové vyrovnání)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredObsFARTyp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string PredObsFARTyp { get; set; }

        /// <summary>
        /// Text řádku
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredObsText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(-1)]
        public string PredObsText { get; set; }

        /// <summary>
        /// Množství
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredObsMnoz", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PredObsMnoz { get; set; }

        /// <summary>
        /// MJ
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredObsMJ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string PredObsMJ { get; set; }

        /// <summary>
        /// cena / MJ
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredObsCenaMJ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PredObsCenaMJ { get; set; }

        /// <summary>
        /// Cena celkem
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredObsCenaCelkem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PredObsCenaCelkem { get; set; }

        /// <summary>
        /// Sazba DPH
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredObsDPH", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PredObsDPH { get; set; }

        /// <summary>
        /// Cena / MJ s DPH
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredObsCenaMJSDPH", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PredObsCenaMJSDPH { get; set; }

        /// <summary>
        /// Cena s DPH celkem
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredObsCenaCelkemSDPH", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PredObsCenaCelkemSDPH { get; set; }

        /// <summary>
        /// Množství v t
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredObsMnozT", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PredObsMnozT { get; set; }

        /// <summary>
        /// Číslo zálohové faktury
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredCisloZaloha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PredCisloZaloha { get; set; }

        /// <summary>
        /// Číslo daňového dokladu k platbě
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredCisloDD1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PredCisloDD1 { get; set; }

        /// <summary>
        /// TPF
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PredObsTPF", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PredObsTPF { get; set; }

        /// <summary>
        /// Středisko
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StredID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StredID { get; set; }

        /// <summary>
        /// Nákladové středisko
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StredN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StredN { get; set; }

        /// <summary>
        /// Skupina DPH
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SKDPH", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SKDPH { get; set; }

        /// <summary>
        /// druh DPH (0 - bez DPH, 1 - snížená sazba, 2 - základní sazba)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DrDph", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DrDph { get; set; }

        /// <summary>
        /// % DPH
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DPHProc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DPHProc { get; set; }

        /// <summary>
        /// Zakázka
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CIZAK", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string CIZAK { get; set; }

        /// <summary>
        /// Název zakázky
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NAZAK", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string NAZAK { get; set; }

        /// <summary>
        /// Aktivita
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AktID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AktID { get; set; }

        /// <summary>
        /// Název aktivity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AktNazev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string AktNazev { get; set; }

        /// <summary>
        /// Ostatní párování
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OstPar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string OstPar { get; set; }

        /// <summary>
        /// TSIns
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TSIns", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset TSIns { get; set; }

        /// <summary>
        /// TS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TS", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset TS { get; set; }

        /// <summary>
        /// upsize_ts
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upsize_ts", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public byte[] Upsize_ts { get; set; }

        /// <summary>
        /// HIST
        /// </summary>
        [Newtonsoft.Json.JsonProperty("HIST", Required = Newtonsoft.Json.Required.Always)]
        public bool HIST { get; set; }

        /// <summary>
        /// Úsek KV DPH
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UseKV", Required = Newtonsoft.Json.Required.Always)]
        public bool UseKV { get; set; }

        /// <summary>
        /// Aktivita popis
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AktPopis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string AktPopis { get; set; }

        /// <summary>
        /// UseStred
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UseStred", Required = Newtonsoft.Json.Required.Always)]
        public bool UseStred { get; set; }

        /// <summary>
        /// Typ nákladu/výnosu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NaklVynID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NaklVynID { get; set; }

        /// <summary>
        /// Název typu nákladu/výnosu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NaklVynNazev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string NaklVynNazev { get; set; }

        /// <summary>
        /// Typ nákladu/výnosu popis
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NaklVynPopis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string NaklVynPopis { get; set; }

    }

    /// <summary>
    /// BCRoadPlanAdresaModel
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BCRoadPlanAdresaModel
    {
        /// <summary>
        /// Identifikátor adresy
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>
        /// Ulice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ulice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Ulice { get; set; }

        /// <summary>
        /// Číslo popisné
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cislo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string Cislo { get; set; }

        /// <summary>
        /// Obec
        /// </summary>
        [Newtonsoft.Json.JsonProperty("obec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Obec { get; set; }

        /// <summary>
        /// Poštovní směrovací číslo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("psc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string Psc { get; set; }

        /// <summary>
        /// Země
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zeme", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string Zeme { get; set; }

    }

    /// <summary>
    /// BCRoadPlanGPSModel
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BCRoadPlanGPSModel
    {
        /// <summary>
        /// Zeměpisná délka
        /// </summary>
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? X { get; set; }

        /// <summary>
        /// Zeměpisná šířka
        /// </summary>
        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Y { get; set; }

    }

    /// <summary>
    /// BCRoadPlanJizdyModel
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BCRoadPlanJizdyModel
    {
        /// <summary>
        /// Identifikátor jízdy
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>
        /// Datum a čas poslední změny
        /// </summary>
        [Newtonsoft.Json.JsonProperty("posledniZmena", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset PosledniZmena { get; set; }

        /// <summary>
        /// Kód provozovny
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provozovna", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Provozovna { get; set; }

        /// <summary>
        /// Evidenční číslo vozidla
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vozidloEvc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VozidloEvc { get; set; }

        /// <summary>
        /// Datum realizace
        /// </summary>
        [Newtonsoft.Json.JsonProperty("datumRealizace", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DatumRealizace { get; set; }

        [Newtonsoft.Json.JsonProperty("smlouva", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public BCRoadPlanSmlouvaModel Smlouva { get; set; } = new BCRoadPlanSmlouvaModel();

        [Newtonsoft.Json.JsonProperty("zakaznik", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public BCRoadPlanZakaznikModel Zakaznik { get; set; } = new BCRoadPlanZakaznikModel();

        [Newtonsoft.Json.JsonProperty("pocatekJizdy", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public BCRoadPlanStanoviste PocatekJizdy { get; set; } = new BCRoadPlanStanoviste();

        [Newtonsoft.Json.JsonProperty("cilJizdy", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public BCRoadPlanStanoviste CilJizdy { get; set; } = new BCRoadPlanStanoviste();

        /// <summary>
        /// Odpady
        /// </summary>
        [Newtonsoft.Json.JsonProperty("odpady", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<BCRoadPlanOdpadyModel> Odpady { get; set; } = new System.Collections.ObjectModel.Collection<BCRoadPlanOdpadyModel>();

    }

    /// <summary>
    /// Data včetně stránkování
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BCRoadPlanJizdyModelBCPaging
    {
        /// <summary>
        /// Seznam záznamů
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BCRoadPlanJizdyModel> Data { get; set; }

        /// <summary>
        /// Celkový počet záznamů
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TotalRecords", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalRecords { get; set; }

    }

    /// <summary>
    /// BCRoadPlanLikvMistaModel
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BCRoadPlanLikvMistaModel
    {
        /// <summary>
        /// Identifikátor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>
        /// Název
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nazev", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Nazev { get; set; }

        /// <summary>
        /// Kód provozovny
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provozovna", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Provozovna { get; set; }

        [Newtonsoft.Json.JsonProperty("gps", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BCRoadPlanGPSModel Gps { get; set; }

        [Newtonsoft.Json.JsonProperty("adresa", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BCRoadPlanAdresaModel Adresa { get; set; }

        /// <summary>
        /// Informace, zda se jedná o likvidační místo organizace
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jeVlastni", Required = Newtonsoft.Json.Required.Always)]
        public bool JeVlastni { get; set; }

        /// <summary>
        /// Odpady
        /// </summary>
        [Newtonsoft.Json.JsonProperty("odpady", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<BCRoadPlanOdpadyModel> Odpady { get; set; } = new System.Collections.ObjectModel.Collection<BCRoadPlanOdpadyModel>();

    }

    /// <summary>
    /// Data včetně stránkování
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BCRoadPlanLikvMistaModelBCPaging
    {
        /// <summary>
        /// Seznam záznamů
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BCRoadPlanLikvMistaModel> Data { get; set; }

        /// <summary>
        /// Celkový počet záznamů
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TotalRecords", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalRecords { get; set; }

    }

    /// <summary>
    /// BCRoadPlanOdpadyModel
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BCRoadPlanOdpadyModel
    {
        /// <summary>
        /// Druhu odpadu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("druhOdpadu", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string DruhOdpadu { get; set; }

        /// <summary>
        /// Kód nakládání
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kodNakladani", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string KodNakladani { get; set; }

        /// <summary>
        /// Kód provozovny
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provozovna", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Provozovna { get; set; }

    }

    /// <summary>
    /// BCRoadPlanSmlouvaModel
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BCRoadPlanSmlouvaModel
    {
        /// <summary>
        /// Identifikátor smlouvy
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>
        /// Číslo smlouvy
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cislo", Required = Newtonsoft.Json.Required.Always)]
        public int Cislo { get; set; }

        /// <summary>
        /// Začátek platnosti smlouvy
        /// </summary>
        [Newtonsoft.Json.JsonProperty("platnostOd", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset PlatnostOd { get; set; }

        /// <summary>
        /// Konec platnosti smlouvy
        /// </summary>
        [Newtonsoft.Json.JsonProperty("platnostDo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PlatnostDo { get; set; }

    }

    /// <summary>
    /// BCRoadPlanStanoviste
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BCRoadPlanStanoviste
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BCRoadPlanStanovisteType Type { get; set; }

        /// <summary>
        /// Identifikátor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>
        /// Název bodu jízdy
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nazev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Nazev { get; set; }

        [Newtonsoft.Json.JsonProperty("gps", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BCRoadPlanGPSModel Gps { get; set; }

        [Newtonsoft.Json.JsonProperty("adresa", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BCRoadPlanAdresaModel Adresa { get; set; }

    }

    /// <summary>
    /// BCRoadPlanStanovisteType
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum BCRoadPlanStanovisteType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LM")]
        LM = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SS")]
        SS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PM")]
        PM = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"J")]
        J = 3,

    }

    /// <summary>
    /// BCRoadPlanZakaznikModel
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BCRoadPlanZakaznikModel
    {
        /// <summary>
        /// Identifikátor zákazníka
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>
        /// Název zákazníka
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nazev", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string Nazev { get; set; }

        /// <summary>
        /// Identifikační číslo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ico", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string Ico { get; set; }

        [Newtonsoft.Json.JsonProperty("adresa", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BCRoadPlanAdresaModel Adresa { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProblemDetails
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instance { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603